<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:control="com.vettigheid.engine.control.*"
	xmlns:view="com.vettigheid.engine.view.*"
	layout="absolute"
	applicationComplete="handleApplicationComplete()"
	width="520"
	height="360"
	frameRate="30"
>
	
	<mx:Script>
		<![CDATA[
			import com.vettigheid.physics.objects.ElevatorPhysicsObject;
			import com.vettigheid.engine.vo.ElevatorValueObject;
			import com.vettigheid.engine.vo.EnemyValueObject;
			import com.vettigheid.physics.objects.EnemyPhysicsObject;
			import com.vettigheid.physics.objects.PlayerPhysicsObject;
			import com.vettigheid.utils.Stats;
			import com.vettigheid.engine.view.DebugView;
			import com.vettigheid.physics.PhysicsWrapper;
			import com.vettigheid.engine.view.ViewManager;
			import com.vettigheid.engine.model.ModelLocator;
			import com.vettigheid.engine.event.KeyEvent;
			import com.vettigheid.engine.event.LevelEvent;
			
			public var model:ModelLocator;
			
			private function handleApplicationComplete():void
			{
				// Show the Statistics for this Application
				this.rawChildren.addChild(new Stats);
				
				// Get a reference to the ModelLocator
				model = ModelLocator.getInstance();
				
				// Put all possible keyCodes in an Array
				for(var i:int = 0; i < 222; i++)
				{
					model.keys.push(false);
				}
			
				// Initialize the Physics Module
				model.physics = new PhysicsWrapper(model.debugMode);
				// Get a reference to the Box2D DebugSprite
				debugView.physicsDebugSprite = model.physics.debugSprite;
				
				// Get a reference to the ViewManager
				model.views = new ViewManager();
				// Add the debugView to the ViewManager
				model.views.addView("debugView", debugView);
				// If DebugMode is FALSE, hide the debugView for the user
				if(!model.debugMode) model.views.hideView("debugView");
				// Add the gameView to the ViewManager
				model.views.addView("gameView", gameView);

				stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
				stage.addEventListener(KeyboardEvent.KEY_UP, handleKeyUp, false, 0, true);				
				this.addEventListener(Event.ENTER_FRAME, handleEnterFrame, false, 0, true);

				// Dispatch a LevelEvent to the EngineController that the first level can be loaded
				var levelEvent:LevelEvent = new LevelEvent(LevelEvent.LOAD_XML);
				levelEvent.dispatch();
			}
			
			private function handleEnterFrame(e:Event):void
			{
				if(model.gameVO != null && model.gameVO.ready)
				{
					// Move the player correspondending to the keyboard presses
					PlayerPhysicsObject(model.physics.getObject(model.gameVO.player.name)).directions = model.keys;
					
					// Render the Box2D Physics Engine
					model.physics.render();
					
					if(model.physics.getObject(model.gameVO.player.name))
					{
						// Move the level according to the movement of the player
						gameView.position = new Point(PlayerPhysicsObject(model.physics.getObject(model.gameVO.player.name)).body.GetPosition().x * 30, PlayerPhysicsObject(model.physics.getObject(model.gameVO.player.name)).body.GetPosition().y * 30);
						debugView.position = gameView.position;
					}
				}
			}
			
			private function handleKeyDown(e:KeyboardEvent):void
			{
				if(model.gameVO != null && model.gameVO.ready)
				{
					var keyEvent:KeyEvent = new KeyEvent(KeyEvent.DOWN, e.keyCode);
					keyEvent.dispatch();
				}
			}
			
			private function handleKeyUp(e:KeyboardEvent):void
			{
				if(model.gameVO != null && model.gameVO.ready)
				{
					var keyEvent:KeyEvent = new KeyEvent(KeyEvent.UP, e.keyCode);
					keyEvent.dispatch();
				}
			}
			
		]]>
	</mx:Script>
	
	<control:EngineController id="engineControl" />
	
	<view:DebugView id="debugView" width="{this.width}" height="{this.height}" />
	<view:GameView id="gameView" width="{this.width}" height="{this.height}" />
	
</mx:Application>